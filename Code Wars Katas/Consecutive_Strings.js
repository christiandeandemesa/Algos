/*
You are given an array of strings strarr and an integer k. Your task is to return the first longest string consisting of k consecutive strings 
taken in the array.

strarr = ["tree", "foling", "trashy", "blue", "abcdef", "uvwxyz"], k = 2

Concatenate the consecutive strings of strarr by 2, we get:

treefoling   (length 10)  concatenation of strarr[0] and strarr[1]
folingtrashy ("      12)  concatenation of strarr[1] and strarr[2]
trashyblue   ("      10)  concatenation of strarr[2] and strarr[3]
blueabcdef   ("      10)  concatenation of strarr[3] and strarr[4]
abcdefuvwxyz ("      12)  concatenation of strarr[4] and strarr[5]

Two strings are the longest: "folingtrashy" and "abcdefuvwxyz".
The first that came is "folingtrashy" so 
longest_consec(strarr, 2) should return "folingtrashy".

In the same way:
longest_consec(["zone", "abigail", "theta", "form", "libe", "zas", "theta", "abigail"], 2) --> "abigailtheta"

n being the length of the string array, if n = 0 or k > n or k <= 0 return "".
*/

// Refer to the README.md for explanation on functions.
function longestConsec(strarr, k) {
    let longStr = '';
    let newStr = '';

    /*
    Removes the edge cases if the array is empty, the number is bigger than the array's length, or the number is a 
    non-positive integer.

    The rest of the function will still work if the number is a float.
    */
    if(strarr.length === 0 || k > strarr.length || k <= 0) {
        return newStr;
    }
    for(let i = 0; i < strarr.length; i++) {

        // Slicing using i and k because the difference between i and k is how many strings we want to join.
        newStr = strarr.slice(i, k).join('');

        // Sets longStr by comparing it to every newStr generated by the for loop.
        if(newStr.length > longStr.length) {
            longStr = newStr;
        }

        // Increments k so we can keep slicing down the array as i increments.
        k++;
    }
    return longStr;
}

console.log(longestConsec(["zone", "abigail", "theta", "form", "libe", "zas"], 2));
// "abigailtheta"

console.log(longestConsec(["ejjjjmmtthh", "zxxuueeg", "aanlljrrrxx", "dqqqaaabbb", "oocccffuucccjjjkkkjyyyeehh"], 1)); 
// "oocccffuucccjjjkkkjyyyeehh"

console.log(longestConsec([], 3));
// ""

console.log(longestConsec(["itvayloxrp", "wkppqsztdkmvcuwvereiupccauycnjutlv", "vweqilsfytihvrzlaodfixoyxvyuyvgpck"], 2)); 
// "wkppqsztdkmvcuwvereiupccauycnjutlvvweqilsfytihvrzlaodfixoyxvyuyvgpck"

console.log(longestConsec(["wlwsasphmxx", "owiaxujylentrklctozmymu", "wpgozvxxiu"], 2));
// "wlwsasphmxxowiaxujylentrklctozmymu"

console.log(longestConsec(["zone", "abigail", "theta", "form", "libe", "zas"], -2))
// ""

console.log(longestConsec(["it", "wkppv", "ixoyx", "3452", "zzzzzzzzzzzz"], 3))
// "ixoyx3452zzzzzzzzzzzz"

console.log(longestConsec(["it", "wkppv", "ixoyx", "3452", "zzzzzzzzzzzz"], 15))
// ""

console.log(longestConsec(["it", "wkppv", "ixoyx", "3452", "zzzzzzzzzzzz"], 0))
// ""